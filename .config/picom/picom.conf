#################################
#             Shadows           #
#################################
shadow = false;

shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];

#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
# fading = false
fading = true

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.06;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.06;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-delta = 10

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [
  "id = 0x3c00004"
]
# Do not fade on window open/close.
# no-fading-openclose = false

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
# no-fading-destroyed-argb = false


#################################
#   Transparency / Opacity      #
#################################


# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
inactive-opacity = 0.7;
inactive-opacity-override = true;
active-opacity = 0.8;

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0.2;

# Specify a list of opacity rules, in the format `PERCENT:PATTERN`, 
# like `50:name *= "Firefox"`. picom-trans is recommended over this. 
# Note we don't make any guarantee about possible conflicts with other 
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
# example:
#    opacity-rule = [ "80:class_g = 'URxvt'" ];
#
opacity-rule = [
  "100:class_g *= 'i3lock'",
	"100:class_g *= 'mpv'",
	"100:class_g *= 'EVE'",
	"100:class_g *= 'GeForce'",
	"100:class_g *= 'Minecraft'",
	"100:class_g *= 'Terraria'",
	"100:class_g *= 'Factorio'",
	"100:class_g *= 'The First Tree'",
	"100:class_g *= 'Chromium'",
	"100:class_g *= 'PPSSPP'",
	"100:class_g *= 'Grand Theft Auto'",
	"100:class_g *= 'Celluloid'",
	"100:class_g *= 'VLC'",
	"85:class_g *= 'LMMS'",
 	"85:class_g *= 'Discord'",
 	"85:class_g *= 'Code'",
 	"55:class_g *= 'Nemo'",
	"100:class_g *= 'RVGL'",
	"100:class_g *= 'Stardew Valley'",
	"100:class_g *= 'InfraSpace'",
	"40:name *= 'rofi - Power'"
]

# Exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "window_type = 'desktop'",
  "role = 'xborder'",
  "_GTK_FRAME_EXTENTS@:c",
  "class_g = 'Chromium'",
  "name = 'Peek'"
]

blur: {
  method = "dual_kawase";
  strength = 6; # 6
  background = false;
  background-frame = false;
  background-fixed = false;
}

#################################
#       General Settings        #
#################################
backend = "glx";
vsync = true
dbus = true
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window, 
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy, 
# provided that the WM supports it.
#
use-ewmh-active-win = true

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows 
# in the same group focused at the same time.
#
# detect-transient = false
detect-transient = true

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same 
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if 
# detect-transient is enabled, too.
#
detect-client-leader = true

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer. 
# Might cause incorrect opacity when rendering transparent content (but never 
# practically happened) and may not work with blur-background. 
# My tests show a 15% performance boost. Recommended.
#
glx-no-stencil = true

# Disable the use of damage information. 
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true

log-level = "warn";

# Window type settings
# 
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard: 
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility", 
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu", 
#     "tooltip", "notification", "combo", and "dnd".
# 
# Following per window-type options are available: ::
# 
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
# 
#   opacity:::
#     Controls default opacity of the window type.
# 
#   focus:::
#     Controls whether the window of this type is to be always considered focused. 
#     (By default, all window types except "normal" and "dialog" has this on.)
# 
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you 
#     normally won't be able to see. Useful when the window has parts of it 
#     transparent, and you want shadows in those areas.
# 
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become 
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection, 
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; opacity = 0.7; blur-background = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.9; }
  dropdown_menu = { opacity = 0.9; }
  notification = { opacity = 0.7; shadow = false; },
  unknown = { opacity = 0.7; }
};

# rounded borders
corner-radius = 12;
